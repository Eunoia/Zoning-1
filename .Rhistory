rename(route_color = color)
#Color palette, legend for zoning districts
#Pulled from APA (https://www.planning.org/lbcs/standards/)
zoning_nyc <- zoning_nyc %>%
mutate(zone_color = case_when(str_sub(zonedist,1,1)=="C" ~ "#FF0000",
str_sub(zonedist,1,1)=="M" ~ "#A020F0",
str_sub(zonedist,1,1)=="R" ~ "#FFFF00",
str_sub(zonedist,1,1)=="P" ~ "#228B22",
str_sub(zonedist,1,1)=="B" ~ "#D3D3D3"),
zone_legend = case_when(str_sub(zonedist,1,1)=="C" ~ "Commercial",
str_sub(zonedist,1,1)=="M" ~ "Manufacturing",
str_sub(zonedist,1,1)=="R" ~ "Residential",
str_sub(zonedist,1,1)=="P" ~ "Park",
str_sub(zonedist,1,1)=="B" ~ "Other"))
#=============
#Map palettes
#=============
zoning_pal <- zoning_nyc %>%
as_tibble() %>%
select(zone_legend,zone_color) %>%
distinct() %>%
mutate(zone_legend = as_factor(zone_legend) %>%
fct_relevel("Commercial","Manufacturing","Residential","Park","Other")) %>%
arrange(zone_legend)
```
```{r transit,include=F,echo=F}
#=============
#Subway
#=============
# set the API key
# set_api_key() # uncomment to set api key
#Grab NYC subway GTFS feed URL
feedlist_sub <- get_feedlist() %>%
filter(grepl("NYC Subway GTFS",t,ignore.case = T))
#Import GTFS
gtfs_sub_nyc <- import_gtfs(feedlist_sub$url_d)
#Get weekday AM/PM rush hour train count by station
gtfs_sub_freq <- inner_join(gtfs_sub_nyc[["stop_times_df"]],gtfs_sub_nyc[["stops_df"]],
by = c("stop_id")) %>%
inner_join(gtfs_sub_nyc[["trips_df"]],by = c("trip_id")) %>%
inner_join(gtfs_sub_nyc[["calendar_df"]],by = c("service_id")) %>%
mutate(rush_hour = case_when((arrival_time>="06:30:00" & arrival_time<="09:30:00")|
(departure_time>="06:30:00" & departure_time<="09:30:00") ~ "AM",
(arrival_time>="15:30:00" & arrival_time<="20:00:00")|
(departure_time>="15:30:00" & departure_time<="20:00:00") ~ "PM",
TRUE ~ NA_character_)) %>%
filter(rush_hour %in% c("AM","PM") &
(monday==1|tuesday==1|wednesday==1|thursday==1|friday==1)) %>%
select(stop_id,stop_name,rush_hour,stop_lat,stop_lon) %>%
group_by(stop_id,stop_name,rush_hour,stop_lat,stop_lon) %>%
summarize(count = n()) %>%
ungroup() %>%
spread(rush_hour,count,fill = 0) %>%
mutate(AM_per_hour = AM/3,PM_per_hour = PM/4.5)
#Only look at those that average 4 per hour/15 minute frequency
high_freq_sub_stops <- gtfs_sub_freq %>%
filter(AM_per_hour>=4 & PM_per_hour>=4) %>%
select(stop_name,stop_lat,stop_lon) %>%
distinct() %>%
st_as_sf(.,coords = c("stop_lon", "stop_lat"),crs = 4326,agr = "constant")
rm(feedlist_sub,gtfs_sub_nyc)
#=============
#Bus
#=============
#Grab NYC bus GTFS feed URL
feedlist_bus <- get_feedlist() %>%
filter(grepl("NYC Bus Company GTFS",t,ignore.case = T))
#Import GTFS
gtfs_bus_nyc <- import_gtfs(feedlist_bus$url_d)
#Get weekday AM/PM rush hour train count by station
gtfs_bus_freq <- inner_join(gtfs_bus_nyc[["stop_times_df"]],gtfs_bus_nyc[["stops_df"]],
by = c("stop_id")) %>%
inner_join(gtfs_bus_nyc[["trips_df"]],by = c("trip_id")) %>%
inner_join(gtfs_bus_nyc[["routes_df"]],by = c("route_id")) %>%
inner_join(gtfs_bus_nyc[["calendar_df"]],by = c("service_id")) %>%
mutate(rush_hour = case_when((arrival_time>="06:30:00" & arrival_time<="09:30:00")|
(departure_time>="06:30:00" & departure_time<="09:30:00") ~ "AM",
(arrival_time>="15:30:00" & arrival_time<="20:00:00")|
(departure_time>="15:30:00" & departure_time<="20:00:00") ~ "PM",
TRUE ~ NA_character_)) %>%
filter(rush_hour %in% c("AM","PM") &
(monday==1|tuesday==1|wednesday==1|thursday==1|friday==1)) %>%
select(stop_id,route_id,stop_name,rush_hour,stop_lat,stop_lon) %>%
group_by(stop_id,route_id,stop_name,rush_hour,stop_lat,stop_lon) %>%
summarize(count = n()) %>%
ungroup() %>%
spread(rush_hour,count,fill = 0) %>%
mutate(AM_per_hour = AM/3,PM_per_hour = PM/4.5)
#Only look at routes with at least 2 stops (start/end?) that average 4 per hour/15 minute frequency
high_freq_bus_routes <- gtfs_bus_freq %>%
filter(AM_per_hour>=4 & PM_per_hour>=4) %>%
select(route_id,stop_name,stop_lat,stop_lon) %>%
group_by(route_id) %>%
summarize(count = n()) %>%
filter(count>=2) %>%
semi_join(bus_routes,.,by = c("route_id"))
rm(feedlist_bus,gtfs_bus_nyc)
```
```{r RDE,include=F,echo=F}
#=============
#Residential District Equivalent (RDE) for Commerical Districts
#=============
#Grab PDF with RDEs
#1st column
rde_pdf_1 <- extract_tables("https://www1.nyc.gov/assets/planning/download/pdf/zoning/districts-tools/zoning_data_tables.pdf",pages = 6,guess = F,
area = list(c(94.86,68.39,748.94,298.65)),
method = "data.frame") %>%
.[[1]] %>%
select(1,4) %>%
rename(zonedist = "X",rde = "Residential") %>%
mutate(zonedist = word(gsub(".*C","C",zonedist),1,1),
rde = ifelse(grepl("R",rde)==T,rde,NA_character_)) %>%
filter(!is.na(rde))
#2nd column
rde_pdf_2 <- extract_tables("https://www1.nyc.gov/assets/planning/download/pdf/zoning/districts-tools/zoning_data_tables.pdf",pages = 6,guess = F,
area = list(c(93.33,314.72,598.23,546.52)),
method = "data.frame") %>%
.[[1]] %>%
select(1,5) %>%
rename(zonedist = "X",rde = "Residential") %>%
mutate(rde = ifelse(grepl("R",rde)==T,rde,NA_character_)) %>%
filter(!is.na(rde))
#Combine into one data frame
rde_pdf <- bind_rows(rde_pdf_1,rde_pdf_2) %>% as_tibble()
rm(rde_pdf_1,rde_pdf_2)
#Pull into citywide zoning
zoning_nyc <- zoning_nyc %>%
left_join(.,rde_pdf,by = "zonedist") %>%
select(zonedist,rde,everything()) %>%
mutate(rde = case_when(str_sub(zonedist,1,1)=="R" ~zonedist,
zonedist %in% c("C5-2.5","C6-4.5") ~ "R10",
TRUE ~ rde),
rde_short = case_when(str_sub(rde,1,3)=="R10" ~ "R10",
rde=="R6B" ~ rde,
TRUE ~ str_sub(rde,1,2)))
```
```{r overlay,include=F,echo=F}
#=============
#Clean Zoning Polygons
#=============
#Only valid geometries
zoning_nyc <- zoning_nyc %>%
filter(!is.na(st_is_valid(.))) %>%
st_buffer(dist = 0)
#Allow residential housing
zoning_nyc_resid <- zoning_nyc %>%
filter(!is.na(rde)) %>%
st_union(.)
#45-foot eligible zones
zoning_nyc_45 <- zoning_nyc %>%
filter(rde_short %in% c("R1","R2","R3","R4","R5")) %>%
st_union(.)
#55-foot eligible zones
zoning_nyc_55 <- zoning_nyc %>%
filter(rde_short %in% c("R1","R2","R3","R4","R5","R6B")) %>%
st_union(.)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
addPolygons(data = zoning_nyc_resid,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7)
dense_park_sub <- high_freq_sub_stops %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 800) %>% #~1/2 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_resid)
dense_park_bus <- high_freq_bus_routes %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 400) %>% #~1/4 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_resid)
dense_park <- st_union(dense_park_sub,dense_park_bus)
rm(dense_park_sub,dense_park_bus)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
addPolygons(data = dense_park,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7)
dense_park_45 <- high_freq_sub_stops %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 800) %>% #~1/2 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_45)
#=============
#Density, Parking, and minimum 55 foot height limit (varies on street width)
#=============
#Within a block of major transit stop or 1/4 mile of high frequency bus and
#in an (R1-R5, R6B) district with max height limits that are too low
dense_park_55_sub <- high_freq_sub_stops %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 215) %>% #~1 block, 700 feet (215 M) for sake of consistency w/ @xander76
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_55)
dense_park_55_bus <- high_freq_bus_routes %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 400) %>% #~1/4 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_55)
dense_park_55 <- st_union(dense_park_55_sub,dense_park_55_bus)
rm(dense_park_55_sub,dense_park_55_bus)
dense_park <- st_disjoint(dense_park,dense_park_45) %>%
st_disjoint(.,dense_park_55)
dense_park <- st_difference(dense_park,dense_park_45) %>%
st_difference(.,dense_park_55)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
addPolygons(data = dense_park,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7)
dense_park_sub <- high_freq_sub_stops %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 800) %>% #~1/2 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_resid)
dense_park_bus <- high_freq_bus_routes %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 400) %>% #~1/4 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_resid)
dense_park <- st_union(dense_park_sub,dense_park_bus)
rm(dense_park_sub,dense_park_bus)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
addPolygons(data = dense_park,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7)
dense_park_45 <- st_difference(dense_park_45,dense_park) %>%
st_difference(.,dense_park_55)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
addPolygons(data = dense_park_45,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
addPolygons(data = dense_park_45,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7)
map_sb_827 <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
#Density and parking only
addPolygons(data = dense_park,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7) %>%
#And max building height at least 45 feet
addPolygons(data = dense_park_45,stroke = F,fill = T,
fillColor = "#00AEDB",fillOpacity = .7) %>%
#And max building height at least 55 feet
addPolygons(data = dense_park_55,stroke = F,fill = T,
fillColor = "#00B159",fillOpacity = .7)
map_sb_827
#Only valid geometries
zoning_nyc <- zoning_nyc %>%
filter(!is.na(st_is_valid(.))) %>%
st_buffer(dist = 0)
#Allow residential housing
zoning_nyc_resid <- zoning_nyc %>%
filter(!is.na(rde)) %>%
st_union(.)
#45-foot eligible zones
zoning_nyc_45 <- zoning_nyc %>%
filter(rde_short %in% c("R1","R2","R3","R4","R5")) %>%
st_union(.)
#55-foot eligible zones
zoning_nyc_55 <- zoning_nyc %>%
filter(rde_short %in% c("R1","R2","R3","R4","R5","R6B")) %>%
st_union(.)
#=============
#Density, Parking Generally
#=============
#Anything within 1/2 mile of major transit stop or 1/4 mile of high frequency bus
#is exempt from density and parking requirements
dense_park_sub <- high_freq_sub_stops %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 800) %>% #~1/2 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_resid)
dense_park_bus <- high_freq_bus_routes %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 400) %>% #~1/4 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_resid)
dense_park <- st_union(dense_park_sub,dense_park_bus)
rm(dense_park_sub,dense_park_bus)
#=============
#Density, Parking, and minimum 45 foot height limit (varies on street width)
#=============
#Within 1/2 mile of major transit stop and
#in an (R1-R5) district with max height limits that are too low
dense_park_45 <- high_freq_sub_stops %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 800) %>% #~1/2 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_45)
#=============
#Density, Parking, and minimum 55 foot height limit (varies on street width)
#=============
#Within a block of major transit stop or 1/4 mile of high frequency bus and
#in an (R1-R5, R6B) district with max height limits that are too low
dense_park_55_sub <- high_freq_sub_stops %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 215) %>% #~1 block, 700 feet (215 M) for sake of consistency w/ @xander76
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_55)
dense_park_55_bus <- high_freq_bus_routes %>%
st_transform(crs = 32618) %>%
st_buffer(dist = 400) %>% #~1/4 mile
st_transform(crs = 4326) %>%
st_union(.) %>%
st_intersection(.,zoning_nyc_55)
dense_park_55 <- st_union(dense_park_55_sub,dense_park_55_bus)
rm(dense_park_55_sub,dense_park_55_bus)
#Impacted areas
map_sb_827 <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
#Density and parking only
addPolygons(data = dense_park,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7) %>%
#And max building height at least 45 feet
addPolygons(data = dense_park_45,stroke = F,fill = T,
fillColor = "#00AEDB",fillOpacity = .7) %>%
#And max building height at least 55 feet
addPolygons(data = dense_park_55,stroke = F,fill = T,
fillColor = "#00B159",fillOpacity = .7)
map_sb_827
map_sb_827 <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
#Density and parking only
addPolygons(data = dense_park,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7) %>%
#And max building height at least 45 feet
addPolygons(data = dense_park_45,stroke = F,fill = T,
fillColor = "#EAF6FF",fillOpacity = .7) %>%
#And max building height at least 55 feet
addPolygons(data = dense_park_55,stroke = F,fill = T,
fillColor = "#00B159",fillOpacity = .7)
map_sb_827
#Impacted areas
map_sb_827 <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
#Density and parking only
addPolygons(data = dense_park,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7) %>%
#And max building height at least 45 feet
addPolygons(data = dense_park_45,stroke = F,fill = T,
fillColor = "#40E0D0",fillOpacity = .7) %>%
#And max building height at least 55 feet
addPolygons(data = dense_park_55,stroke = F,fill = T,
fillColor = "#00B159",fillOpacity = .7)
map_sb_827
map_sb_827 <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
#Density and parking only
addPolygons(data = dense_park,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = .7) %>%
#And max building height at least 45 feet
addPolygons(data = dense_park_45,stroke = F,fill = T,
fillColor = "#40E0D0",fillOpacity = .7) %>%
#And max building height at least 55 feet
addPolygons(data = dense_park_55,stroke = F,fill = T,
fillColor = "#008000",fillOpacity = .7)
map_sb_827
map_sb_827 <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.9951,lat = 40.7236,zoom = 11) %>%
#Density and parking only
addPolygons(data = dense_park,stroke = F,fill = T,
fillColor = "#F37735",fillOpacity = 1) %>%
#And max building height at least 45 feet
addPolygons(data = dense_park_45,stroke = F,fill = T,
fillColor = "#40E0D0",fillOpacity = 1) %>%
#And max building height at least 55 feet
addPolygons(data = dense_park_55,stroke = F,fill = T,
fillColor = "#008000",fillOpacity = 1)
map_sb_827
library(hrbrthemes);library(tidyverse)
library(stringr);library(lubridate)
library(zoo);library(scales)
library(sf);library(gtfsr)
library(viridis);library(leaflet)
library(janitor);library(tabulizer)
options(scipen = 1000,stringsAsFactors = F)
setwd("E:/Data/Zoning")
#=============
#Import zoning and base map data
#=============
#Subway stops
tmpdir <- tempdir()
url <- "https://planninglabs.carto.com/api/v2/sql?q=SELECT * FROM support_trans_mta_subway_stops&format=SHP"
file <- paste0(tmpdir,"/cartodb-query.zip")
download.file(url,file,mode = "wb")
unzip(file,exdir = tmpdir)
sub_stops <- st_read(paste0(tmpdir,"/cartodb-query.shp"))
#Subway routes
tmpdir <- tempdir()
url <- "https://planninglabs.carto.com/api/v2/sql?q=SELECT * FROM support_trans_mta_subway_routes&format=SHP"
file <- paste0(tmpdir,"/cartodb-query.zip")
download.file(url,file,mode = "wb")
unzip(file,exdir = tmpdir)
sub_routes <- st_read(paste0(tmpdir,"/cartodb-query.shp"))
#Bus routes
tmpdir <- tempdir()
url <- "http://faculty.baruch.cuny.edu/geoportal/data/nyc_transit/aug2017/express_bus_routes_nyc_aug2017.zip"
file <- paste0(tmpdir,"/express_bus_routes_nyc_aug2017.zip")
download.file(url,file,mode = "wb")
unzip(file,exdir = tmpdir)
bus_routes <- st_read(paste0(tmpdir,"/express_bus_routes_nyc_aug2017.shp"))
#Zoning polygons
tmpdir <- tempdir()
url <- "https://www1.nyc.gov/assets/planning/download/zip/data-maps/open-data/nycgiszoningfeatures_201712shp.zip"
file <- paste0(tmpdir,"/nycgiszoningfeatures_201712shp.zip")
download.file(url,file,mode = "wb")
unzip(file,exdir = tmpdir)
zoning_nyc <- st_read(paste0(tmpdir,"/nycgiszoningfeatures_201712shp/nyzd.shp"))
#Transform so that everything is on the same CRS
bus_routes <- bus_routes %>% st_transform(.,crs = 4326)
zoning_nyc <- zoning_nyc %>% st_transform(.,crs = 4326)
# #Write local copy for draft purposes
# st_write(sub_stops,"sub_stops.shp")
# st_write(sub_routes,"sub_routes.shp")
# st_write(bus_routes,"bus_routes.shp")
# st_write(zoning_nyc,"zoning_nyc.shp")
#
# #Read local copies
# sub_stops <- st_read("sub_stops.shp")
# sub_routes <- st_read("sub_routes.shp")
# bus_routes <- st_read("bus_routes.shp")
# zoning_nyc <- st_read("zoning_nyc.shp")
#=============
#Colors
#=============
---
title: "SB 827 in NYC"
author: "Sean Connelly"
date: "`r format(Sys.Date(),'%B %d, %Y')`"
output: github_document
always_allow_html: yes
editor_options:
chunk_output_type: console
---
```{r setup,include=F,echo=F}
knitr::opts_chunk$set(message = F,warning = F,fig.width = 10,fig.align = "center")
library(hrbrthemes);library(tidyverse)
library(stringr);library(lubridate)
library(zoo);library(scales)
library(sf);library(gtfsr)
library(viridis);library(leaflet)
library(janitor);library(tabulizer)
options(scipen = 1000,stringsAsFactors = F)
setwd("E:/Data/Zoning")
#=============
#Import zoning and base map data
#=============
#Subway stops
tmpdir <- tempdir()
url <- "https://planninglabs.carto.com/api/v2/sql?q=SELECT * FROM support_trans_mta_subway_stops&format=SHP"
file <- paste0(tmpdir,"/cartodb-query.zip")
download.file(url,file,mode = "wb")
unzip(file,exdir = tmpdir)
sub_stops <- st_read(paste0(tmpdir,"/cartodb-query.shp"))
#Subway routes
tmpdir <- tempdir()
url <- "https://planninglabs.carto.com/api/v2/sql?q=SELECT * FROM support_trans_mta_subway_routes&format=SHP"
file <- paste0(tmpdir,"/cartodb-query.zip")
download.file(url,file,mode = "wb")
unzip(file,exdir = tmpdir)
sub_routes <- st_read(paste0(tmpdir,"/cartodb-query.shp"))
#Bus routes
tmpdir <- tempdir()
url <- "http://faculty.baruch.cuny.edu/geoportal/data/nyc_transit/aug2017/express_bus_routes_nyc_aug2017.zip"
file <- paste0(tmpdir,"/express_bus_routes_nyc_aug2017.zip")
download.file(url,file,mode = "wb")
unzip(file,exdir = tmpdir)
bus_routes <- st_read(paste0(tmpdir,"/express_bus_routes_nyc_aug2017.shp"))
#Zoning polygons
tmpdir <- tempdir()
url <- "https://www1.nyc.gov/assets/planning/download/zip/data-maps/open-data/nycgiszoningfeatures_201712shp.zip"
file <- paste0(tmpdir,"/nycgiszoningfeatures_201712shp.zip")
download.file(url,file,mode = "wb")
unzip(file,exdir = tmpdir)
zoning_nyc <- st_read(paste0(tmpdir,"/nycgiszoningfeatures_201712shp/nyzd.shp")) %>%
clean_names()
#Transform so that everything is on the same CRS
bus_routes <- bus_routes %>% st_transform(.,crs = 4326)
zoning_nyc <- zoning_nyc %>% st_transform(.,crs = 4326)
sb_827_pal <- as_tibble(c("Density and Parking",
"Height Limit of 45' (55' on wide streets)",
"Height Limit of 55' (85' on wide streets)"),
c("#F37735","#40E0D0","#008000"))
sb_827_pal <- tibble(c("Density and Parking",
"Height Limit of 45' (55' on wide streets)",
"Height Limit of 55' (85' on wide streets)"),
c("#F37735","#40E0D0","#008000"))
sb_827_pal <- tibble(label = c("Density and Parking",
"Height Limit of 45' (55' on wide streets)",
"Height Limit of 55' (85' on wide streets)"),
color = c("#F37735","#40E0D0","#008000"))
